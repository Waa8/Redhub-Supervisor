# Production Dockerfile for Productivity Management System
FROM node:18-alpine AS base

# Install security updates and required packages
RUN apk update && apk upgrade && \
    apk add --no-cache \
    dumb-init \
    curl \
    && rm -rf /var/cache/apk/*

# Create app directory and user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
FROM base AS dependencies
RUN npm ci --only=production && npm cache clean --force

# Development dependencies for building
FROM base AS build-deps
RUN npm ci

# Build stage
FROM build-deps AS build
COPY . .
RUN npm run build 2>/dev/null || echo "No build script found"

# Production stage
FROM base AS production

# Copy node_modules from dependencies stage
COPY --from=dependencies --chown=nextjs:nodejs /app/node_modules ./node_modules

# Copy application code
COPY --chown=nextjs:nodejs . .

# Create necessary directories
RUN mkdir -p logs uploads public && \
    chown -R nextjs:nodejs logs uploads public

# Remove development files
RUN rm -rf \
    .git \
    .gitignore \
    .env \
    .env.example \
    README.md \
    Dockerfile* \
    docker-compose* \
    tests \
    docs \
    *.md

# Set production environment
ENV NODE_ENV=production
ENV PORT=5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Expose port
EXPOSE 5000

# Switch to non-root user
USER nextjs

# Start application with dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "server-production.js"]

# Labels for metadata
LABEL maintainer="admin@your-domain.com"
LABEL version="1.0.0"
LABEL description="Production Productivity Management System"
LABEL org.opencontainers.image.source="https://github.com/your-org/productivity-app"
